/* The following code was generated by JFlex 1.6.1 */

/* Spec file built with the guidance of the example lexer at http://jflex.de/manual.html */

package com.ajsg2.minimaljava.lex;

import com.ajsg2.minimaljava.common.tokens.Token;
import com.ajsg2.minimaljava.common.tokens.UnexpectedCharacterException;
import com.ajsg2.minimaljava.common.tokens.simple.Assignment;
import com.ajsg2.minimaljava.common.tokens.simple.BracketL;
import com.ajsg2.minimaljava.common.tokens.simple.BracketR;
import com.ajsg2.minimaljava.common.tokens.simple.CurlyBraceL;
import com.ajsg2.minimaljava.common.tokens.simple.CurlyBraceR;
import com.ajsg2.minimaljava.common.tokens.simple.KeywordClass;
import com.ajsg2.minimaljava.common.tokens.simple.KeywordExtends;
import com.ajsg2.minimaljava.common.tokens.simple.KeywordNew;
import com.ajsg2.minimaljava.common.tokens.simple.KeywordReturn;
import com.ajsg2.minimaljava.common.tokens.simple.KeywordVoid;
import com.ajsg2.minimaljava.common.tokens.simple.OpAnd;
import com.ajsg2.minimaljava.common.tokens.simple.OpDiv;
import com.ajsg2.minimaljava.common.tokens.simple.OpEq;
import com.ajsg2.minimaljava.common.tokens.simple.OpGT;
import com.ajsg2.minimaljava.common.tokens.simple.OpGTE;
import com.ajsg2.minimaljava.common.tokens.simple.OpMinus;
import com.ajsg2.minimaljava.common.tokens.simple.OpMod;
import com.ajsg2.minimaljava.common.tokens.simple.OpMult;
import com.ajsg2.minimaljava.common.tokens.simple.OpNot;
import com.ajsg2.minimaljava.common.tokens.simple.OpOr;
import com.ajsg2.minimaljava.common.tokens.simple.OpPlus;
import com.ajsg2.minimaljava.common.tokens.simple.Period;
import com.ajsg2.minimaljava.common.tokens.simple.Semicolon;
import com.ajsg2.minimaljava.common.tokens.simple.TypeBoolean;
import com.ajsg2.minimaljava.common.tokens.simple.TypeChar;
import com.ajsg2.minimaljava.common.tokens.simple.TypeDouble;
import com.ajsg2.minimaljava.common.tokens.simple.TypeInt;
import com.ajsg2.minimaljava.common.tokens.simple.TypeLong;
import com.ajsg2.minimaljava.common.tokens.value.LitBool;

/**
 * The Minimal Java Lexer
 */

public class Lexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;
	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state
	 * in the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a
	 * non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
			"\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\1\42" +
					"\2\0\1\5\1\40\1\35\1\0\1\45\1\46\1\41\1\44\1\0" +
					"\1\37\1\51\1\4\1\7\11\10\1\0\1\52\1\0\1\34\1\36" +
					"\2\0\32\5\4\0\1\5\1\0\1\25\1\31\1\23\1\22\1\12" +
					"\1\30\1\33\1\32\1\21\2\5\1\24\1\5\1\11\1\20\2\5" +
					"\1\14\1\26\1\15\1\16\1\17\1\13\1\27\2\5\1\47\1\43" +
					"\1\50\1\0\41\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0" +
					"\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0" +
					"\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0\160\6\5\5" +
					"\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5" +
					"\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6" +
					"\2\0\246\5\1\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5" +
					"\1\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6" +
					"\10\0\33\5\5\0\3\5\15\0\6\6\5\0\1\5\4\0\13\6" +
					"\1\0\1\6\3\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0" +
					"\1\5\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6" +
					"\3\5\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0" +
					"\131\5\13\6\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5" +
					"\5\0\26\5\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0" +
					"\31\5\3\6\104\0\25\5\56\0\41\6\66\5\3\6\1\5\22\6" +
					"\1\5\7\6\12\5\2\6\2\0\12\6\1\0\20\5\3\6\1\0" +
					"\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0" +
					"\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5" +
					"\10\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5" +
					"\7\0\1\5\5\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5" +
					"\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6" +
					"\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5" +
					"\1\0\1\5\7\0\14\6\3\5\1\6\13\0\3\6\1\0\11\5" +
					"\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5" +
					"\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5" +
					"\17\0\2\5\2\6\2\0\12\6\1\0\1\5\7\0\1\5\7\0" +
					"\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0" +
					"\2\5\1\0\5\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0" +
					"\3\6\10\0\2\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6" +
					"\1\0\1\5\20\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0" +
					"\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0" +
					"\3\5\3\0\14\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0" +
					"\1\5\6\0\1\6\16\0\12\6\11\0\1\5\6\0\4\6\1\0" +
					"\10\5\1\0\3\5\1\0\27\5\1\0\20\5\3\0\1\5\7\6" +
					"\1\0\3\6\1\0\4\6\7\0\2\6\1\0\3\5\5\0\2\5" +
					"\2\6\2\0\12\6\21\0\3\6\1\0\10\5\1\0\3\5\1\0" +
					"\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0" +
					"\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5\2\6" +
					"\2\0\12\6\1\0\2\5\16\0\3\6\1\0\10\5\1\0\3\5" +
					"\1\0\51\5\2\0\1\5\7\6\1\0\3\6\1\0\4\6\1\5" +
					"\10\0\1\6\7\0\3\5\2\6\2\0\12\6\12\0\6\5\2\0" +
					"\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0" +
					"\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\6\0" +
					"\12\6\2\0\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5" +
					"\10\6\1\0\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0" +
					"\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0" +
					"\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6" +
					"\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0" +
					"\12\6\2\0\4\5\40\0\1\5\27\0\2\6\6\0\12\6\13\0" +
					"\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\5\1\0\44\5" +
					"\4\0\24\6\1\0\2\6\5\5\13\6\1\0\44\6\11\0\1\6" +
					"\71\0\53\5\24\6\1\5\12\6\6\0\6\5\4\6\4\5\3\6" +
					"\1\5\3\6\2\5\7\6\3\5\4\6\15\5\14\6\1\5\17\6" +
					"\2\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5" +
					"\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5" +
					"\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5" +
					"\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5" +
					"\2\0\3\6\40\0\20\5\20\0\126\5\2\0\6\5\3\0\u026c\5" +
					"\2\0\21\5\1\0\32\5\5\0\113\5\3\0\13\5\7\0\15\5" +
					"\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0" +
					"\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5" +
					"\3\0\2\5\1\6\2\0\12\6\41\0\4\6\1\0\12\6\6\0" +
					"\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0\37\5\1\0" +
					"\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\13\0\54\5" +
					"\4\0\32\5\6\0\12\6\46\0\27\5\5\6\4\0\65\5\12\6" +
					"\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\5\10\0\16\6" +
					"\102\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0\11\6\14\0" +
					"\3\6\36\5\15\6\2\5\12\6\54\5\16\6\14\0\44\5\24\6" +
					"\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6\1\0\25\6" +
					"\4\5\1\6\4\5\3\6\2\5\1\0\2\6\6\0\300\5\66\6" +
					"\6\0\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0" +
					"\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0" +
					"\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0" +
					"\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0" +
					"\5\6\32\0\5\6\20\0\2\5\23\0\1\5\13\0\5\6\1\0" +
					"\12\6\1\0\1\5\15\0\1\5\20\0\15\5\3\0\37\5\21\0" +
					"\15\6\4\0\1\6\3\0\14\6\21\0\1\5\4\0\1\5\2\0" +
					"\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0" +
					"\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0" +
					"\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0" +
					"\4\5\3\6\2\5\14\0\46\5\1\0\1\5\5\0\1\5\2\0" +
					"\70\5\7\0\1\5\17\0\1\6\27\5\11\0\7\5\1\0\7\5" +
					"\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5" +
					"\1\0\7\5\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5" +
					"\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0" +
					"\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5\21\0" +
					"\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51d6\5\52\0\u048d\5\103\0" +
					"\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\1\6" +
					"\4\0\12\6\1\0\37\5\2\6\120\5\2\6\45\0\11\5\2\0" +
					"\147\5\2\0\43\5\2\0\10\5\77\0\13\5\1\6\3\5\1\6" +
					"\4\5\1\6\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6" +
					"\62\5\21\6\13\0\12\6\6\0\22\6\6\5\3\0\1\5\1\0" +
					"\1\5\2\0\12\6\34\5\10\6\2\0\27\5\15\6\14\0\35\5" +
					"\3\0\4\6\57\5\16\6\16\0\1\5\12\6\6\0\5\5\1\6" +
					"\12\5\12\6\5\5\1\0\51\5\16\6\11\0\3\5\1\6\10\5" +
					"\2\6\2\0\12\6\6\0\27\5\3\0\1\5\3\6\62\5\1\6" +
					"\1\5\3\6\2\5\2\6\5\5\2\6\1\5\1\6\1\5\30\0" +
					"\3\5\2\0\13\5\5\6\2\0\3\5\2\6\12\0\6\5\2\0" +
					"\6\5\2\0\6\5\11\0\7\5\1\0\7\5\1\0\53\5\1\0" +
					"\12\5\12\0\163\5\10\6\1\0\2\6\2\0\12\6\6\0\u2ba4\5" +
					"\14\0\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5" +
					"\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5" +
					"\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5" +
					"\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\20\6" +
					"\3\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5" +
					"\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5" +
					"\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5" +
					"\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0\14\5" +
					"\1\0\32\5\1\0\23\5\1\0\2\5\1\0\17\5\2\0\16\5" +
					"\42\0\173\5\105\0\65\5\210\0\1\6\202\0\35\5\3\0\61\5" +
					"\17\0\1\6\37\0\40\5\20\0\33\5\5\0\46\5\5\6\5\0" +
					"\36\5\2\0\44\5\4\0\10\5\1\0\5\5\52\0\236\5\2\0" +
					"\12\6\126\0\50\5\10\0\64\5\234\0\u0137\5\11\0\26\5\12\0" +
					"\10\5\230\0\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0" +
					"\1\5\2\0\27\5\12\0\27\5\11\0\37\5\101\0\23\5\1\0" +
					"\2\5\12\0\26\5\12\0\32\5\106\0\70\5\6\0\2\5\100\0" +
					"\1\5\3\6\1\0\2\6\5\0\4\6\4\5\1\0\3\5\1\0" +
					"\33\5\4\0\3\6\4\0\1\6\40\0\35\5\3\0\35\5\43\0" +
					"\10\5\1\0\34\5\2\6\31\0\66\5\12\0\26\5\12\0\23\5" +
					"\15\0\22\5\156\0\111\5\67\0\63\5\15\0\63\5\u030d\0\3\6" +
					"\65\5\17\6\37\0\12\6\17\0\4\6\55\5\13\6\2\0\1\6" +
					"\22\0\31\5\7\0\12\6\6\0\3\6\44\5\16\6\1\0\12\6" +
					"\20\0\43\5\1\6\2\0\1\5\11\0\3\6\60\5\16\6\4\5" +
					"\5\0\3\6\3\0\12\6\1\5\1\0\1\5\43\0\22\5\1\0" +
					"\31\5\14\6\110\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5" +
					"\1\0\12\5\7\0\57\5\14\6\5\0\12\6\6\0\4\6\1\0" +
					"\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0" +
					"\5\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\2\0" +
					"\1\5\6\0\1\6\5\0\5\5\2\6\2\0\7\6\3\0\5\6" +
					"\u010b\0\60\5\24\6\2\5\1\0\1\5\10\0\12\6\246\0\57\5" +
					"\7\6\2\0\11\6\27\0\4\5\2\6\42\0\60\5\21\6\3\0" +
					"\1\5\13\0\12\6\46\0\53\5\15\6\10\0\12\6\66\0\32\5" +
					"\3\0\17\6\4\0\12\6\u0166\0\100\5\12\6\25\0\1\5\u01c0\0" +
					"\71\5\u0507\0\u039a\5\146\0\157\5\21\0\304\5\u0abc\0\u042f\5\u0fd1\0" +
					"\u0247\5\u21b9\0\u0239\5\7\0\37\5\1\0\12\6\146\0\36\5\2\0" +
					"\5\6\13\0\60\5\7\6\11\0\4\5\14\0\12\6\11\0\25\5" +
					"\5\0\23\5\u0370\0\105\5\13\0\1\5\56\6\20\0\4\6\15\5" +
					"\u4060\0\2\5\u0bfe\0\153\5\5\0\15\5\3\0\11\5\7\0\12\5" +
					"\3\0\2\6\1\0\4\6\u14c1\0\5\6\3\0\26\6\2\0\7\6" +
					"\36\0\4\6\224\0\3\6\u01bb\0\125\5\1\0\107\5\1\0\2\5" +
					"\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5" +
					"\1\0\7\5\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5" +
					"\1\0\34\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\7\5" +
					"\1\0\u0154\5\2\0\31\5\1\0\31\5\1\0\37\5\1\0\31\5" +
					"\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5" +
					"\1\0\31\5\1\0\10\5\2\0\62\6\u0200\0\67\6\4\0\62\6" +
					"\10\0\1\6\16\0\1\6\26\0\5\6\1\0\17\6\u0d50\0\305\5" +
					"\13\0\7\6\u0529\0\4\5\1\0\33\5\1\0\2\5\1\0\1\5" +
					"\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5" +
					"\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5" +
					"\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5" +
					"\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5" +
					"\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5" +
					"\1\0\21\5\5\0\3\5\1\0\5\5\1\0\21\5\u1144\0\ua6d7\5" +
					"\51\0\u1035\5\13\0\336\5\2\0\u1682\5\u295e\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
					+
					"\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
	private static final String ZZ_ACTION_PACKED_0 =
			"\1\0\1\1\2\2\1\3\15\2\1\4\1\1\1\5" +
					"\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14" +
					"\1\15\1\16\1\17\1\20\15\2\1\21\1\22\1\23" +
					"\1\24\1\25\4\2\1\26\10\2\1\27\1\30\2\2" +
					"\1\31\1\32\5\2\1\33\1\34\2\2\1\35\1\36" +
					"\1\2\1\37\1\40";
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\53\0\126\0\53\0\201\0\254\0\327\0\u0102" +
					"\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a" +
					"\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\53\0\53\0\53" +
					"\0\53\0\u035c\0\53\0\53\0\53\0\53\0\53\0\53" +
					"\0\53\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489" +
					"\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\53\0\53" +
					"\0\53\0\53\0\254\0\u05b6\0\u05e1\0\u060c\0\u0637\0\254" +
					"\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f" +
					"\0\254\0\254\0\u07ba\0\u07e5\0\254\0\254\0\u0810\0\u083b" +
					"\0\u0866\0\u0891\0\u08bc\0\254\0\254\0\u08e7\0\u0912\0\254" +
					"\0\254\0\u093d\0\254\0\254";
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	private static final String ZZ_TRANS_PACKED_0 =
			"\1\2\1\3\2\4\1\5\1\6\1\2\1\4\1\7" +
					"\1\10\1\11\1\6\1\12\1\13\1\6\1\14\1\6" +
					"\1\15\1\16\1\17\1\20\3\6\1\21\1\22\2\6" +
					"\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
					"\1\33\1\34\1\35\1\36\1\37\1\40\1\41\55\0" +
					"\1\4\54\0\1\42\53\0\27\6\26\0\2\7\47\0" +
					"\5\6\1\43\21\6\24\0\22\6\1\44\4\6\24\0" +
					"\5\6\1\45\21\6\24\0\7\6\1\46\17\6\24\0" +
					"\13\6\1\47\13\6\24\0\4\6\1\50\22\6\24\0" +
					"\13\6\1\51\13\6\24\0\17\6\1\52\5\6\1\53" +
					"\1\6\24\0\13\6\1\54\13\6\24\0\20\6\1\55" +
					"\6\6\24\0\13\6\1\56\13\6\53\0\1\57\53\0" +
					"\1\60\51\0\1\61\61\0\1\62\7\0\1\42\1\3" +
					"\1\4\50\42\5\0\6\6\1\63\20\6\24\0\10\6" +
					"\1\64\16\6\24\0\10\6\1\65\16\6\24\0\11\6" +
					"\1\66\15\6\24\0\14\6\1\67\12\6\24\0\10\6" +
					"\1\70\16\6\24\0\11\6\1\71\15\6\24\0\20\6" +
					"\1\72\6\6\24\0\20\6\1\73\6\6\24\0\4\6" +
					"\1\74\22\6\24\0\17\6\1\75\7\6\24\0\13\6" +
					"\1\76\13\6\24\0\5\6\1\77\21\6\24\0\11\6" +
					"\1\100\15\6\24\0\5\6\1\101\21\6\24\0\15\6" +
					"\1\102\11\6\24\0\24\6\1\103\2\6\24\0\21\6" +
					"\1\104\5\6\24\0\7\6\1\105\17\6\24\0\26\6" +
					"\1\106\24\0\21\6\1\107\5\6\24\0\17\6\1\110" +
					"\7\6\24\0\4\6\1\111\22\6\24\0\7\6\1\112" +
					"\17\6\24\0\17\6\1\113\7\6\24\0\21\6\1\114" +
					"\5\6\24\0\5\6\1\115\21\6\24\0\5\6\1\116" +
					"\21\6\24\0\15\6\1\117\11\6\24\0\4\6\1\120" +
					"\22\6\24\0\5\6\1\121\21\6\24\0\20\6\1\122" +
					"\6\6\24\0\21\6\1\123\5\6\24\0\4\6\1\124" +
					"\22\6\17\0";
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};
	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\1\0\1\11\1\1\1\11\21\1\4\11\1\1\7\11" +
					"\15\1\4\11\42\1";
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	/**
	 * the input device
	 */
	private java.io.Reader zzReader;
	/**
	 * the current state of the DFA
	 */
	private int zzState;
	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;
	/**
	 * this buffer contains the current text to be matched and is the source of the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;
	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;
	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;
	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;
	/**
	 * number of newlines encountered up to the start of the matched text
	 */
	private int yyline;
	/**
	 * the number of characters up to the start of the matched text
	 */
	private int yychar;
	/**
	 * the number of characters from the last newline up to the start of the matched text
	 */
	private int yycolumn;
	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;
	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;
	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a lead/high surrogate has
	 * been read from the input stream into the final zzBuffer position, this will have a value of
	 * 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in) {
		this.zzReader = in;
	}

	private static int[] zzUnpackAction() {
		int[] result = new int[84];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackRowMap() {
		int[] result = new int[84];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		int[] result = new int[2408];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		int[] result = new int[84];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	/* user code: */
	//empty

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x110000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 3236) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException(
					"Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if (numRead > 0) {
			zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
			if (numRead == requested) {
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true;            /* indicate end of file */
		zzEndRead = zzStartRead;  /* invalidate buffer    */

		if (zzReader != null) {
			zzReader.close();
		}
	}


	/**
	 * Resets the scanner to read from a new input stream. Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE) {
			zzBuffer = new char[ZZ_BUFFERSIZE];
		}
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback
	 * rule) this method will only be called with things that "Can't Possibly Happen". If this
	 * method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner
	 * etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 * yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}


	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}


	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is
	 * encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public Token yylex() throws java.io.IOException, UnexpectedCharacterException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead;
					zzCurrentPosL < zzMarkedPosL;
					zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR) {
							zzR = false;
						} else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (zzAtEOF) {
					zzPeek = false;
				} else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				zzDoEOF();
				return null;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						throw new UnexpectedCharacterException(yytext(), yyline, yycolumn);
					}
					case 33:
						break;
					case 2: {
					}
					case 34:
						break;
					case 3: {
						return new OpDiv(yyline, yycolumn);
					}
					case 35:
						break;
					case 4: {
						return new Assignment(yyline, yycolumn);
					}
					case 36:
						break;
					case 5: {
						return new OpGT(yyline, yycolumn);
					}
					case 37:
						break;
					case 6: {
						return new OpMinus(yyline, yycolumn);
					}
					case 38:
						break;
					case 7: {
						return new OpMod(yyline, yycolumn);
					}
					case 39:
						break;
					case 8: {
						return new OpMult(yyline, yycolumn);
					}
					case 40:
						break;
					case 9: {
						return new OpNot(yyline, yycolumn);
					}
					case 41:
						break;
					case 10: {
						return new OpPlus(yyline, yycolumn);
					}
					case 42:
						break;
					case 11: {
						return new BracketL(yyline, yycolumn);
					}
					case 43:
						break;
					case 12: {
						return new BracketR(yyline, yycolumn);
					}
					case 44:
						break;
					case 13: {
						return new CurlyBraceL(yyline, yycolumn);
					}
					case 45:
						break;
					case 14: {
						return new CurlyBraceR(yyline, yycolumn);
					}
					case 46:
						break;
					case 15: {
						return new Period(yyline, yycolumn);
					}
					case 47:
						break;
					case 16: {
						return new Semicolon(yyline, yycolumn);
					}
					case 48:
						break;
					case 17: {
						return new OpEq(yyline, yycolumn);
					}
					case 49:
						break;
					case 18: {
						return new OpAnd(yyline, yycolumn);
					}
					case 50:
						break;
					case 19: {
						return new OpGTE(yyline, yycolumn);
					}
					case 51:
						break;
					case 20: {
						return new OpOr(yyline, yycolumn);
					}
					case 52:
						break;
					case 21: {
						return new KeywordNew(yyline, yycolumn);
					}
					case 53:
						break;
					case 22: {
						return new TypeInt(yyline, yycolumn);
					}
					case 54:
						break;
					case 23: {
						return new LitBool(yyline, yycolumn, true);
					}
					case 55:
						break;
					case 24: {
						return new KeywordVoid(yyline, yycolumn);
					}
					case 56:
						break;
					case 25: {
						return new TypeChar(yyline, yycolumn);
					}
					case 57:
						break;
					case 26: {
						return new TypeLong(yyline, yycolumn);
					}
					case 58:
						break;
					case 27: {
						return new KeywordClass(yyline, yycolumn);
					}
					case 59:
						break;
					case 28: {
						return new LitBool(yyline, yycolumn, false);
					}
					case 60:
						break;
					case 29: {
						return new KeywordReturn(yyline, yycolumn);
					}
					case 61:
						break;
					case 30: {
						return new TypeDouble(yyline, yycolumn);
					}
					case 62:
						break;
					case 31: {
						return new KeywordExtends(yyline, yycolumn);
					}
					case 63:
						break;
					case 32: {
						return new TypeBoolean(yyline, yycolumn);
					}
					case 64:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
