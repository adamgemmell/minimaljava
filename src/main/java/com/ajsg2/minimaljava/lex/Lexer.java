/* The following code was generated by JFlex 1.6.1 */

/* Spec file built with the guidance of the example lexer at http://jflex.de/manual.html */

package com.ajsg2.minimaljava.lex;

import com.ajsg2.minimaljava.common.tokens.UnexpectedCharacterException;
import com.ajsg2.minimaljava.parse.sym;
import java_cup.runtime.*;

/**
 * The Minimal Java Lexer
 */

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\56\1\57\1\1\16\6\4\0\1\3\1\44"+
    "\2\0\1\5\1\42\1\37\1\55\1\47\1\50\1\43\1\46\1\54"+
    "\1\41\1\11\1\4\12\7\1\0\1\53\1\0\1\36\1\40\2\0"+
    "\13\5\1\10\16\5\4\0\1\5\1\0\1\26\1\33\1\24\1\23"+
    "\1\13\1\31\1\35\1\34\1\22\2\5\1\25\1\5\1\12\1\21"+
    "\1\32\1\5\1\15\1\27\1\16\1\17\1\20\1\14\1\30\2\5"+
    "\1\51\1\45\1\52\1\0\6\6\1\60\32\6\2\0\4\5\4\0"+
    "\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0"+
    "\1\5\21\0\160\6\5\5\1\0\2\5\2\0\4\5\1\0\1\5"+
    "\6\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5"+
    "\1\0\213\5\1\0\5\6\2\0\246\5\1\0\46\5\2\0\1\5"+
    "\7\0\47\5\7\0\1\5\1\0\55\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\6\10\0\33\5\5\0\3\5\15\0\6\6"+
    "\5\0\1\5\4\0\13\6\1\0\1\6\3\0\53\5\37\6\4\0"+
    "\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6"+
    "\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5"+
    "\1\6\36\5\33\6\2\0\131\5\13\6\1\5\16\0\12\6\41\5"+
    "\11\6\2\5\4\0\1\5\5\0\26\5\4\6\1\5\11\6\1\5"+
    "\3\6\1\5\5\6\22\0\31\5\3\6\104\0\25\5\56\0\41\6"+
    "\66\5\3\6\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6"+
    "\1\0\20\5\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0"+
    "\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6\1\0\6\5"+
    "\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5"+
    "\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6"+
    "\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5\1\6"+
    "\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0\3\6"+
    "\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6\1\0"+
    "\1\5\7\0\1\5\7\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0"+
    "\1\5\6\0\4\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\20\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\1\0\3\5\5\0\2\5\2\6\2\0\12\6\21\0\3\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0"+
    "\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0"+
    "\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5\16\0\3\6"+
    "\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\6\1\0"+
    "\3\6\1\0\4\6\1\5\10\0\1\6\7\0\3\5\2\6\2\0"+
    "\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0\30\5\1\0"+
    "\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6\1\0"+
    "\1\6\1\0\10\6\6\0\12\6\2\0\2\6\15\0\60\5\1\6"+
    "\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0"+
    "\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0"+
    "\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0"+
    "\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0"+
    "\1\5\1\0\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0"+
    "\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6"+
    "\1\0\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0"+
    "\6\5\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6"+
    "\15\5\14\6\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5"+
    "\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5"+
    "\1\0\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\126\5"+
    "\2\0\6\5\3\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5"+
    "\3\0\13\5\7\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6"+
    "\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0"+
    "\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0"+
    "\4\6\1\0\12\6\6\0\130\5\10\0\51\5\1\6\1\5\5\0"+
    "\106\5\12\0\37\5\1\0\14\6\4\0\14\6\12\0\12\6\36\5"+
    "\2\0\5\5\13\0\54\5\4\0\32\5\6\0\12\6\46\0\27\5"+
    "\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6"+
    "\15\0\1\5\10\0\16\6\102\0\5\6\57\5\21\6\7\5\4\0"+
    "\12\6\21\0\11\6\14\0\3\6\36\5\15\6\2\5\12\6\54\5"+
    "\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5\12\6\44\5"+
    "\122\0\3\6\1\0\25\6\4\5\1\6\4\5\3\6\2\5\1\0"+
    "\2\6\6\0\300\5\66\6\6\0\4\6\u0116\5\2\0\6\5\2\0"+
    "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"+
    "\3\5\1\0\7\5\16\0\5\6\30\0\1\56\1\56\5\6\20\0"+
    "\2\5\23\0\1\5\13\0\5\6\1\0\12\6\1\0\1\5\15\0"+
    "\1\5\20\0\15\5\3\0\37\5\21\0\15\6\4\0\1\6\3\0"+
    "\14\6\21\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0"+
    "\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\13\5\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0"+
    "\57\5\1\0\57\5\1\0\205\5\6\0\4\5\3\6\2\5\14\0"+
    "\46\5\1\0\1\5\5\0\1\5\2\0\70\5\7\0\1\5\17\0"+
    "\1\6\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\6"+
    "\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0"+
    "\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0\132\5\1\0"+
    "\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0"+
    "\u19b6\5\112\0\u51d6\5\52\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0"+
    "\20\5\12\6\2\5\24\0\57\5\1\6\4\0\12\6\1\0\37\5"+
    "\2\6\120\5\2\6\45\0\11\5\2\0\147\5\2\0\43\5\2\0"+
    "\10\5\77\0\13\5\1\6\3\5\1\6\4\5\1\6\27\5\5\6"+
    "\20\0\1\5\7\0\64\5\14\0\2\6\62\5\21\6\13\0\12\6"+
    "\6\0\22\6\6\5\3\0\1\5\1\0\1\5\2\0\12\6\34\5"+
    "\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6\57\5\16\6"+
    "\16\0\1\5\12\6\6\0\5\5\1\6\12\5\12\6\5\5\1\0"+
    "\51\5\16\6\11\0\3\5\1\6\10\5\2\6\2\0\12\6\6\0"+
    "\27\5\3\0\1\5\3\6\62\5\1\6\1\5\3\6\2\5\2\6"+
    "\5\5\2\6\1\5\1\6\1\5\30\0\3\5\2\0\13\5\5\6"+
    "\2\0\3\5\2\6\12\0\6\5\2\0\6\5\2\0\6\5\11\0"+
    "\7\5\1\0\7\5\1\0\53\5\1\0\12\5\12\0\163\5\10\6"+
    "\1\0\2\6\2\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5"+
    "\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5"+
    "\1\6\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5"+
    "\50\0\15\5\3\0\20\6\20\0\20\6\3\0\2\5\30\0\3\5"+
    "\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5"+
    "\13\0\12\6\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5"+
    "\3\0\2\5\22\0\3\6\4\0\14\5\1\0\32\5\1\0\23\5"+
    "\1\0\2\5\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5"+
    "\210\0\1\6\202\0\35\5\3\0\61\5\17\0\1\6\37\0\40\5"+
    "\20\0\33\5\5\0\46\5\5\6\5\0\36\5\2\0\44\5\4\0"+
    "\10\5\1\0\5\5\52\0\236\5\2\0\12\6\126\0\50\5\10\0"+
    "\64\5\234\0\u0137\5\11\0\26\5\12\0\10\5\230\0\6\5\2\0"+
    "\1\5\1\0\54\5\1\0\2\5\3\0\1\5\2\0\27\5\12\0"+
    "\27\5\11\0\37\5\101\0\23\5\1\0\2\5\12\0\26\5\12\0"+
    "\32\5\106\0\70\5\6\0\2\5\100\0\1\5\3\6\1\0\2\6"+
    "\5\0\4\6\4\5\1\0\3\5\1\0\33\5\4\0\3\6\4\0"+
    "\1\6\40\0\35\5\3\0\35\5\43\0\10\5\1\0\34\5\2\6"+
    "\31\0\66\5\12\0\26\5\12\0\23\5\15\0\22\5\156\0\111\5"+
    "\67\0\63\5\15\0\63\5\u030d\0\3\6\65\5\17\6\37\0\12\6"+
    "\17\0\4\6\55\5\13\6\2\0\1\6\22\0\31\5\7\0\12\6"+
    "\6\0\3\6\44\5\16\6\1\0\12\6\20\0\43\5\1\6\2\0"+
    "\1\5\11\0\3\6\60\5\16\6\4\5\5\0\3\6\3\0\12\6"+
    "\1\5\1\0\1\5\43\0\22\5\1\0\31\5\14\6\110\0\7\5"+
    "\1\0\1\5\1\0\4\5\1\0\17\5\1\0\12\5\7\0\57\5"+
    "\14\6\5\0\12\6\6\0\4\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\2\0\1\5\6\0\1\6\5\0"+
    "\5\5\2\6\2\0\7\6\3\0\5\6\u010b\0\60\5\24\6\2\5"+
    "\1\0\1\5\10\0\12\6\246\0\57\5\7\6\2\0\11\6\27\0"+
    "\4\5\2\6\42\0\60\5\21\6\3\0\1\5\13\0\12\6\46\0"+
    "\53\5\15\6\10\0\12\6\66\0\32\5\3\0\17\6\4\0\12\6"+
    "\u0166\0\100\5\12\6\25\0\1\5\u01c0\0\71\5\u0507\0\u039a\5\146\0"+
    "\157\5\21\0\304\5\u0abc\0\u042f\5\u0fd1\0\u0247\5\u21b9\0\u0239\5\7\0"+
    "\37\5\1\0\12\6\146\0\36\5\2\0\5\6\13\0\60\5\7\6"+
    "\11\0\4\5\14\0\12\6\11\0\25\5\5\0\23\5\u0370\0\105\5"+
    "\13\0\1\5\56\6\20\0\4\6\15\5\u4060\0\2\5\u0bfe\0\153\5"+
    "\5\0\15\5\3\0\11\5\7\0\12\5\3\0\2\6\1\0\4\6"+
    "\u14c1\0\5\6\3\0\26\6\2\0\7\6\36\0\4\6\224\0\3\6"+
    "\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0\1\5\2\0\2\5"+
    "\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\101\5"+
    "\1\0\4\5\2\0\10\5\1\0\7\5\1\0\34\5\1\0\4\5"+
    "\1\0\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5\2\0\31\5"+
    "\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\10\5"+
    "\2\0\62\6\u0200\0\67\6\4\0\62\6\10\0\1\6\16\0\1\6"+
    "\26\0\5\6\1\0\17\6\u0d50\0\305\5\13\0\7\6\u0529\0\4\5"+
    "\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5"+
    "\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5"+
    "\1\0\4\5\1\0\1\5\1\0\12\5\1\0\21\5\5\0\3\5"+
    "\1\0\5\5\1\0\21\5\u1144\0\ua6d7\5\51\0\u1035\5\13\0\336\5"+
    "\2\0\u1682\5\u295e\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\14\4"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1"+
    "\1\2\1\24\1\0\1\25\10\4\1\26\7\4\1\27"+
    "\1\30\1\31\1\32\1\0\1\33\6\4\1\34\7\4"+
    "\1\35\1\36\1\37\2\4\1\40\1\41\2\4\1\42"+
    "\1\43\6\4\1\44\1\45\1\46\2\4\1\47\1\50"+
    "\1\4\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\61"+
    "\0\61\0\61\0\61\0\u0436\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\u0467\0\u0498\0\61\0\u0126\0\u0126"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620"+
    "\0\304\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\61\0\61\0\61\0\61\0\u07a8\0\304\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\304\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\61\0\304\0\304\0\u0a56"+
    "\0\u0a87\0\304\0\304\0\u0ab8\0\u0ae9\0\304\0\304\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\304\0\304\0\304"+
    "\0\u0c40\0\u0c71\0\304\0\304\0\u0ca2\0\304\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\6"+
    "\1\10\1\11\1\12\1\6\1\13\1\14\1\6\1\15"+
    "\1\6\1\16\1\17\1\20\1\21\1\6\1\22\1\6"+
    "\1\23\1\6\1\24\2\6\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\2\1\4\1\2\63\0"+
    "\1\4\62\0\1\45\61\0\4\6\1\0\24\6\22\0"+
    "\1\6\7\0\1\7\1\46\1\47\13\0\1\46\42\0"+
    "\1\50\56\0\4\6\1\0\1\6\1\51\3\6\1\52"+
    "\16\6\22\0\1\6\5\0\4\6\1\0\13\6\1\53"+
    "\2\6\1\54\5\6\22\0\1\6\5\0\4\6\1\0"+
    "\1\6\1\55\22\6\22\0\1\6\5\0\4\6\1\0"+
    "\3\6\1\56\20\6\22\0\1\6\5\0\4\6\1\0"+
    "\7\6\1\57\14\6\22\0\1\6\5\0\4\6\1\0"+
    "\1\60\16\6\1\61\4\6\22\0\1\6\5\0\4\6"+
    "\1\0\7\6\1\62\14\6\22\0\1\6\5\0\4\6"+
    "\1\0\13\6\1\63\6\6\1\64\1\6\22\0\1\6"+
    "\5\0\4\6\1\0\7\6\1\65\14\6\22\0\1\6"+
    "\5\0\4\6\1\0\5\6\1\66\16\6\22\0\1\6"+
    "\5\0\4\6\1\0\14\6\1\67\7\6\22\0\1\6"+
    "\5\0\4\6\1\0\7\6\1\70\14\6\22\0\1\6"+
    "\36\0\1\71\61\0\1\72\57\0\1\73\67\0\1\74"+
    "\13\0\1\75\2\0\53\75\3\0\1\45\1\3\1\4"+
    "\56\45\5\0\4\6\1\0\2\6\1\76\21\6\22\0"+
    "\1\6\5\0\4\6\1\0\13\6\1\77\10\6\22\0"+
    "\1\6\5\0\4\6\1\0\15\6\1\100\6\6\22\0"+
    "\1\6\5\0\4\6\1\0\4\6\1\101\17\6\22\0"+
    "\1\6\5\0\4\6\1\0\4\6\1\102\17\6\22\0"+
    "\1\6\5\0\4\6\1\0\5\6\1\103\16\6\22\0"+
    "\1\6\5\0\4\6\1\0\10\6\1\104\13\6\22\0"+
    "\1\6\5\0\4\6\1\0\4\6\1\105\17\6\22\0"+
    "\1\6\5\0\4\6\1\0\5\6\1\106\16\6\22\0"+
    "\1\6\5\0\4\6\1\0\14\6\1\107\7\6\22\0"+
    "\1\6\5\0\4\6\1\0\14\6\1\110\7\6\22\0"+
    "\1\6\5\0\4\6\1\0\1\111\23\6\22\0\1\6"+
    "\5\0\4\6\1\0\20\6\1\112\3\6\22\0\1\6"+
    "\5\0\4\6\1\0\13\6\1\113\10\6\22\0\1\6"+
    "\5\0\4\6\1\0\7\6\1\114\14\6\22\0\1\6"+
    "\55\0\1\115\10\0\4\6\1\0\13\6\1\116\10\6"+
    "\22\0\1\6\5\0\4\6\1\0\1\6\1\117\22\6"+
    "\22\0\1\6\5\0\4\6\1\0\1\6\1\120\22\6"+
    "\22\0\1\6\5\0\4\6\1\0\5\6\1\121\16\6"+
    "\22\0\1\6\5\0\4\6\1\0\1\6\1\122\22\6"+
    "\22\0\1\6\5\0\4\6\1\0\11\6\1\123\12\6"+
    "\22\0\1\6\5\0\4\6\1\0\21\6\1\124\2\6"+
    "\22\0\1\6\5\0\4\6\1\0\15\6\1\125\6\6"+
    "\22\0\1\6\5\0\4\6\1\0\3\6\1\126\20\6"+
    "\22\0\1\6\5\0\4\6\1\0\23\6\1\127\22\0"+
    "\1\6\5\0\4\6\1\0\1\6\1\130\22\6\22\0"+
    "\1\6\5\0\4\6\1\0\15\6\1\131\6\6\22\0"+
    "\1\6\5\0\4\6\1\0\13\6\1\132\10\6\22\0"+
    "\1\6\5\0\4\6\1\0\1\133\23\6\22\0\1\6"+
    "\5\0\4\6\1\0\3\6\1\134\20\6\22\0\1\6"+
    "\5\0\4\6\1\0\13\6\1\135\10\6\22\0\1\6"+
    "\5\0\4\6\1\0\15\6\1\136\6\6\22\0\1\6"+
    "\5\0\4\6\1\0\3\6\1\137\20\6\22\0\1\6"+
    "\5\0\4\6\1\0\1\6\1\140\22\6\22\0\1\6"+
    "\5\0\4\6\1\0\1\6\1\141\22\6\22\0\1\6"+
    "\5\0\4\6\1\0\11\6\1\142\12\6\22\0\1\6"+
    "\5\0\4\6\1\0\1\143\23\6\22\0\1\6\5\0"+
    "\4\6\1\0\1\6\1\144\22\6\22\0\1\6\5\0"+
    "\4\6\1\0\14\6\1\145\7\6\22\0\1\6\5\0"+
    "\4\6\1\0\15\6\1\146\6\6\22\0\1\6\5\0"+
    "\4\6\1\0\1\147\23\6\22\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3283];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\23\1\4\11\1\1\7\11"+
    "\2\1\1\11\1\0\21\1\4\11\1\0\17\1\1\11"+
    "\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol(int type) {
     		return new Symbol(type, yyline+1, yycolumn+1);
     	}

      private Symbol symbol(int type, Object value) {
      	return new Symbol(type, yyline+1, yycolumn+1, value);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, UnexpectedCharacterException,NumberFormatException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { throw new UnexpectedCharacterException(yytext(), yyline, yycolumn); }");
            { throw new UnexpectedCharacterException(yytext(), yyline, yycolumn);
            }
          case 43: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] {  }");
            { 
            }
          case 44: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return symbol(sym.DIV); }");
            { return symbol(sym.DIV);
            }
          case 45: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.IDENT, yytext()); }");
            { return symbol(sym.IDENT, yytext());
            }
          case 46: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { Integer num;"+ZZ_NL+"\t\t\t\t\t"+ZZ_NL+"\t\t\t\t\t// throws NumberFormatException"+ZZ_NL+"\t\t\t\t\tnum = Integer.parseInt(yytext());"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\treturn  symbol(sym.LITINT, num); }");
            { Integer num;
					
					// throws NumberFormatException
					num = Integer.parseInt(yytext());

					return  symbol(sym.LITINT, num);
            }
          case 47: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return symbol(sym.PERIOD); }");
            { return symbol(sym.PERIOD);
            }
          case 48: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return symbol(sym.ASSIGN); }");
            { return symbol(sym.ASSIGN);
            }
          case 49: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return symbol(sym.GT); }");
            { return symbol(sym.GT);
            }
          case 50: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return symbol(sym.MINUS); }");
            { return symbol(sym.MINUS);
            }
          case 51: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return symbol(sym.MOD); }");
            { return symbol(sym.MOD);
            }
          case 52: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return symbol(sym.MULT); }");
            { return symbol(sym.MULT);
            }
          case 53: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return symbol(sym.NOT); }");
            { return symbol(sym.NOT);
            }
          case 54: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return symbol(sym.PLUS); }");
            { return symbol(sym.PLUS);
            }
          case 55: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return symbol(sym.BRACKETL); }");
            { return symbol(sym.BRACKETL);
            }
          case 56: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return symbol(sym.BRACKETR); }");
            { return symbol(sym.BRACKETR);
            }
          case 57: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return symbol(sym.CURLYBRACEL); }");
            { return symbol(sym.CURLYBRACEL);
            }
          case 58: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return symbol(sym.CURLYBRACER); }");
            { return symbol(sym.CURLYBRACER);
            }
          case 59: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return symbol(sym.SEMICOLON); }");
            { return symbol(sym.SEMICOLON);
            }
          case 60: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return symbol(sym.COMMA); }");
            { return symbol(sym.COMMA);
            }
          case 61: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { Long num;"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\t// Guaranteed to end in L or l"+ZZ_NL+"\t\t\t\t\tString numText = yytext().substring(0, yytext().length()-1);"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\t// throws NumberFormatException"+ZZ_NL+"\t\t\t\t\tnum = Long.parseLong(numText);"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\treturn symbol(sym.LITLONG, num); }");
            { Long num;

					// Guaranteed to end in L or l
					String numText = yytext().substring(0, yytext().length()-1);

					// throws NumberFormatException
					num = Long.parseLong(numText);

					return symbol(sym.LITLONG, num);
            }
          case 62: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { double num;"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\t// throws NumberFormatException"+ZZ_NL+"\t\t\t\t\tnum = Double.parseDouble(yytext());"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\treturn symbol(sym.LITDOUBLE, num); }");
            { double num;

					// throws NumberFormatException
					num = Double.parseDouble(yytext());

					return symbol(sym.LITDOUBLE, num);
            }
          case 63: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return symbol(sym.IF); }");
            { return symbol(sym.IF);
            }
          case 64: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return symbol(sym.EQ); }");
            { return symbol(sym.EQ);
            }
          case 65: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return symbol(sym.AND); }");
            { return symbol(sym.AND);
            }
          case 66: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return symbol(sym.GTE); }");
            { return symbol(sym.GTE);
            }
          case 67: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return symbol(sym.OR); }");
            { return symbol(sym.OR);
            }
          case 68: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return symbol(sym.NEW); }");
            { return symbol(sym.NEW);
            }
          case 69: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return symbol(sym.INT); }");
            { return symbol(sym.INT);
            }
          case 70: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { // character guaranteed to be 2nd char, of 3"+ZZ_NL+"\t\t\t\t\tCharacter c = yytext().charAt(1);"+ZZ_NL+""+ZZ_NL+"\t\t\t\t\treturn symbol(sym.LITCHAR, c); }");
            { // character guaranteed to be 2nd char, of 3
					Character c = yytext().charAt(1);

					return symbol(sym.LITCHAR, c);
            }
          case 71: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return symbol(sym.NULL); }");
            { return symbol(sym.NULL);
            }
          case 72: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            }
          case 73: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return symbol(sym.LITBOOL, Boolean.TRUE); }");
            { return symbol(sym.LITBOOL, Boolean.TRUE);
            }
          case 74: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return symbol(sym.VOID); }");
            { return symbol(sym.VOID);
            }
          case 75: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return symbol(sym.CHAR); }");
            { return symbol(sym.CHAR);
            }
          case 76: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return symbol(sym.LONG); }");
            { return symbol(sym.LONG);
            }
          case 77: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return symbol(sym.CLASS); }");
            { return symbol(sym.CLASS);
            }
          case 78: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return symbol(sym.SUPER); }");
            { return symbol(sym.SUPER);
            }
          case 79: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return symbol(sym.LITBOOL, Boolean.FALSE); }");
            { return symbol(sym.LITBOOL, Boolean.FALSE);
            }
          case 80: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return symbol(sym.RETURN); }");
            { return symbol(sym.RETURN);
            }
          case 81: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return symbol(sym.DOUBLE); }");
            { return symbol(sym.DOUBLE);
            }
          case 82: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return symbol(sym.EXTENDS); }");
            { return symbol(sym.EXTENDS);
            }
          case 83: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return symbol(sym.BOOL); }");
            { return symbol(sym.BOOL);
            }
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
