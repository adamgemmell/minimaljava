
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.ajsg2.minimaljava.parse;

import com.ajsg2.minimaljava.common.ast.*;
import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\003\000\002\013" +
    "\005\000\002\006\003\000\002\014\003\000\002\015\004" +
    "\000\002\016\006\000\002\020\005\000\002\020\004\000" +
    "\002\047\003\000\002\047\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\046\003\000\002\046" +
    "\004\000\002\026\005\000\002\027\004\000\002\025\004" +
    "\000\002\051\003\000\002\051\004\000\002\052\004\000" +
    "\002\053\003\000\002\053\005\000\002\021\004\000\002" +
    "\022\006\000\002\022\005\000\002\023\012\000\002\023" +
    "\011\000\002\023\011\000\002\023\010\000\002\031\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\003\000" +
    "\002\032\006\000\002\032\005\000\002\010\004\000\002" +
    "\010\005\000\002\050\003\000\002\050\004\000\002\024" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\003" +
    "\000\002\024\004\000\002\024\005\000\002\024\003\000" +
    "\002\041\005\000\002\030\013\000\002\034\003\000\002" +
    "\036\005\000\002\036\003\000\002\037\006\000\002\037" +
    "\006\000\002\037\003\000\002\040\004\000\002\040\003" +
    "\000\002\040\003\000\002\042\003\000\002\042\005\000" +
    "\002\042\003\000\002\043\005\000\002\035\003\000\002" +
    "\035\003\000\002\044\004\000\002\044\005\000\002\054" +
    "\005\000\002\054\004\000\002\045\007\000\002\045\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\013\006\001\002\000\004\002\251\001" +
    "\002\000\004\006\022\001\002\000\004\046\012\001\002" +
    "\000\004\002\uffe3\001\002\000\006\002\uffd9\013\006\001" +
    "\002\000\004\002\uffd8\001\002\000\004\015\013\001\002" +
    "\000\004\046\016\001\002\000\046\004\uffe7\005\uffe7\006" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036" +
    "\uffe7\037\uffe7\046\uffe7\001\002\000\006\006\uffe1\011\020" +
    "\001\002\000\046\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6\046" +
    "\uffe6\001\002\000\046\004\uffe8\005\uffe8\006\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8" +
    "\046\uffe8\001\002\000\004\046\021\001\002\000\046\004" +
    "\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\036\uffe5\037\uffe5\046\uffe5\001\002\000\024" +
    "\007\036\022\044\040\027\041\030\042\025\043\046\044" +
    "\040\045\035\046\026\001\002\000\006\002\uffe2\013\uffe2" +
    "\001\002\000\024\007\uffdb\022\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\006" +
    "\005\ufffe\046\ufffe\001\002\000\010\004\245\011\uffe6\046" +
    "\uffe6\001\002\000\006\005\000\046\000\001\002\000\006" +
    "\005\uffff\046\uffff\001\002\000\004\046\242\001\002\000" +
    "\004\006\145\001\002\000\024\007\uffde\022\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\001" +
    "\002\000\024\007\uffdc\022\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002\000\004\006" +
    "\uffc5\001\002\000\006\002\uffdf\013\uffdf\001\002\000\006" +
    "\005\ufffc\046\ufffc\001\002\000\006\005\ufffb\046\ufffb\001" +
    "\002\000\024\007\uffda\022\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\001\002\000\004\046" +
    "\ufff9\001\002\000\004\006\066\001\002\000\004\046\053" +
    "\001\002\000\024\007\051\022\044\040\027\041\030\042" +
    "\025\043\046\044\040\045\035\046\026\001\002\000\006" +
    "\005\ufffd\046\ufffd\001\002\000\006\011\020\046\ufffa\001" +
    "\002\000\024\007\uffdd\022\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000\006\002" +
    "\uffe0\013\uffe0\001\002\000\004\006\uffc6\001\002\000\004" +
    "\004\054\001\002\000\020\005\056\040\027\041\030\042" +
    "\025\043\046\044\040\046\016\001\002\000\006\005\uffd4" +
    "\012\063\001\002\000\004\006\uffc3\001\002\000\004\005" +
    "\062\001\002\000\004\046\061\001\002\000\006\005\uffd5" +
    "\012\uffd5\001\002\000\004\006\uffc4\001\002\000\016\040" +
    "\027\041\030\042\025\043\046\044\040\046\016\001\002" +
    "\000\004\005\uffd3\001\002\000\004\005\uffd2\001\002\000" +
    "\004\023\070\001\002\000\024\007\uffcf\022\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\001" +
    "\002\000\004\004\071\001\002\000\026\004\105\005\103" +
    "\020\110\035\077\046\016\047\107\050\102\051\100\052" +
    "\075\053\073\001\002\000\040\005\uffac\010\uffac\011\uffac" +
    "\012\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\036\uffac\037\uffac\046\uffac\001\002" +
    "\000\040\005\ufff4\010\ufff4\011\ufff4\012\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\036\ufff4\037\ufff4\046\ufff4\001\002\000\034\005\uffb5\010" +
    "\uffb5\012\uffb5\025\123\026\131\027\130\030\132\031\124" +
    "\032\122\033\126\034\125\036\133\037\127\001\002\000" +
    "\040\005\ufff5\010\ufff5\011\ufff5\012\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036" +
    "\ufff5\037\ufff5\046\ufff5\001\002\000\006\005\233\012\174" +
    "\001\002\000\024\004\142\020\110\035\077\046\016\047" +
    "\107\050\102\051\100\052\075\053\073\001\002\000\040" +
    "\005\ufff6\010\ufff6\011\ufff6\012\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6" +
    "\037\ufff6\046\ufff6\001\002\000\034\005\uffb3\010\uffb3\012" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\036\uffb3\037\uffb3\001\002\000\040\005" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037" +
    "\ufff7\046\ufff7\001\002\000\004\010\140\001\002\000\006" +
    "\005\uffd1\012\uffd1\001\002\000\036\004\105\020\110\035" +
    "\077\040\027\041\030\042\025\043\046\044\040\046\016" +
    "\047\107\050\102\051\100\052\075\053\073\001\002\000" +
    "\036\005\uffae\010\uffae\011\114\012\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\036" +
    "\uffae\037\uffae\001\002\000\040\005\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\046\ufff8\001\002" +
    "\000\040\005\ufff3\010\ufff3\011\ufff3\012\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\036\ufff3\037\ufff3\046\ufff3\001\002\000\040\005\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\046" +
    "\uffaa\001\002\000\034\005\uffb0\010\uffb0\012\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\036\uffb0\037\uffb0\001\002\000\036\005\uffad\010\uffad" +
    "\011\020\012\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\036\uffad\037\uffad\001\002" +
    "\000\004\046\115\001\002\000\040\005\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\046\uffa9\001" +
    "\002\000\004\005\136\001\002\000\004\005\120\001\002" +
    "\000\024\004\105\020\110\035\077\046\016\047\107\050" +
    "\102\051\100\052\075\053\073\001\002\000\034\005\uffb1" +
    "\010\uffb1\012\uffb1\025\123\026\131\027\130\030\132\031" +
    "\124\032\122\033\126\034\125\036\133\037\127\001\002" +
    "\000\024\004\ufff1\020\ufff1\035\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\024\004\uffeb" +
    "\020\uffeb\035\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\001\002\000\024\004\uffec\020\uffec\035\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\001" +
    "\002\000\024\004\ufff0\020\ufff0\035\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\024\004" +
    "\uffee\020\uffee\035\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\001\002\000\024\004\ufff2\020\ufff2\035" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\001\002\000\024\004\uffe9\020\uffe9\035\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002\000\024" +
    "\004\uffef\020\uffef\035\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\001\002\000\024\004\uffed\020\uffed" +
    "\035\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\001\002\000\024\004\uffea\020\uffea\035\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002\000" +
    "\024\004\105\020\110\035\077\046\016\047\107\050\102" +
    "\051\100\052\075\053\073\001\002\000\034\005\uffb4\010" +
    "\uffb4\012\uffb4\025\123\026\131\027\130\030\132\031\124" +
    "\032\122\033\126\034\125\036\133\037\127\001\002\000" +
    "\060\004\105\005\uffab\010\uffab\011\uffab\012\uffab\020\110" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\077\036\uffab\037\uffab\046\016\047\107" +
    "\050\102\051\100\052\075\053\073\001\002\000\034\005" +
    "\uffb2\010\uffb2\012\uffb2\025\123\026\131\027\130\030\132" +
    "\031\124\032\122\033\126\034\125\036\133\037\127\001" +
    "\002\000\050\004\142\006\145\007\143\010\147\016\151" +
    "\017\155\020\110\021\154\040\027\041\030\042\025\043" +
    "\046\044\040\046\016\047\107\050\102\051\100\052\075" +
    "\053\073\001\002\000\004\010\231\001\002\000\024\004" +
    "\105\020\110\035\077\046\016\047\107\050\102\051\100" +
    "\052\075\053\073\001\002\000\024\007\uffc9\022\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\001\002\000\050\004\uffb8\006\uffb8\007\uffb8\010\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\001\002\000\050\004\142\006\145\007\224" +
    "\010\147\016\151\017\155\020\110\021\154\040\027\041" +
    "\030\042\025\043\046\044\040\046\016\047\107\050\102" +
    "\051\100\052\075\053\073\001\002\000\012\004\214\011" +
    "\020\024\222\046\ufffa\001\002\000\050\004\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002\000\006\011" +
    "\114\046\213\001\002\000\004\004\203\001\002\000\004" +
    "\010\202\001\002\000\050\004\142\006\145\007\uffc0\010" +
    "\147\016\151\017\155\020\110\021\154\040\027\041\030" +
    "\042\025\043\046\044\040\046\016\047\107\050\102\051" +
    "\100\052\075\053\073\001\002\000\024\004\105\020\110" +
    "\035\077\046\016\047\107\050\102\051\100\052\075\053" +
    "\073\001\002\000\004\046\016\001\002\000\050\004\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000" +
    "\004\010\uffa8\001\002\000\004\010\uffa7\001\002\000\004" +
    "\010\166\001\002\000\004\007\165\001\002\000\004\046" +
    "\016\001\002\000\004\010\uffd6\001\002\000\024\007\uffca" +
    "\022\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\001\002\000\050\004\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\006\004\uffe4\011" +
    "\020\001\002\000\004\004\171\001\002\000\026\004\105" +
    "\005\173\020\110\035\077\046\016\047\107\050\102\051" +
    "\100\052\075\053\073\001\002\000\006\005\175\012\174" +
    "\001\002\000\004\010\uffa1\001\002\000\024\004\105\020" +
    "\110\035\077\046\016\047\107\050\102\051\100\052\075" +
    "\053\073\001\002\000\004\010\uffa2\001\002\000\006\005" +
    "\uffd0\012\uffd0\001\002\000\004\010\200\001\002\000\050" +
    "\004\uffb9\006\uffb9\007\uffb9\010\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\004\007\uffbf\001\002\000\050\004\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000\024\004" +
    "\105\020\110\035\077\046\016\047\107\050\102\051\100" +
    "\052\075\053\073\001\002\000\004\027\205\001\002\000" +
    "\024\004\105\020\110\035\077\046\016\047\107\050\102" +
    "\051\100\052\075\053\073\001\002\000\004\005\207\001" +
    "\002\000\004\006\145\001\002\000\004\014\211\001\002" +
    "\000\004\006\145\001\002\000\050\004\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\004\004\214" +
    "\001\002\000\026\004\105\005\217\020\110\035\077\046" +
    "\016\047\107\050\102\051\100\052\075\053\073\001\002" +
    "\000\004\010\uffa5\001\002\000\006\005\220\012\174\001" +
    "\002\000\004\010\uffa3\001\002\000\004\010\uffa4\001\002" +
    "\000\004\010\uffa6\001\002\000\024\004\105\020\110\035" +
    "\077\046\016\047\107\050\102\051\100\052\075\053\073" +
    "\001\002\000\004\010\uffb7\001\002\000\056\004\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\014\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\001\002\000\004\007\226\001\002\000\056\004" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\014\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\001\002\000\004\005\230\001\002\000" +
    "\040\005\uffab\010\uffab\011\uffab\012\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\036" +
    "\uffab\037\uffab\046\uffab\001\002\000\050\004\uffba\006\uffba" +
    "\007\uffba\010\uffba\016\uffba\017\uffba\020\uffba\021\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\001\002\000\034\005" +
    "\uffaf\010\uffaf\012\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\001" +
    "\002\000\004\010\234\001\002\000\050\004\142\006\145" +
    "\007\235\010\147\016\151\017\155\020\110\021\154\040" +
    "\027\041\030\042\025\043\046\044\040\046\016\047\107" +
    "\050\102\051\100\052\075\053\073\001\002\000\024\007" +
    "\uffcb\022\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\001\002\000\004\007\237\001\002\000" +
    "\024\007\uffcc\022\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\001\002\000\024\007\uffc8\022" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\001\002\000\004\006\uffc7\001\002\000\006\004" +
    "\054\010\uffe6\001\002\000\004\010\244\001\002\000\024" +
    "\007\uffd7\022\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\001\002\000\020\005\246\040\027" +
    "\041\030\042\025\043\046\044\040\046\016\001\002\000" +
    "\004\006\uffcd\001\002\000\004\005\250\001\002\000\004" +
    "\006\uffce\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\012\014\003\015\007\016\004\046\006\001" +
    "\001\000\002\001\001\000\004\020\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\007\016\004\046" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\014\012\016\013\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\036\004\041\005" +
    "\030\011\046\012\016\013\013\017\032\021\040\022\042" +
    "\026\033\031\023\033\031\047\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\242\032" +
    "\240\001\001\000\004\010\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\066\001\001\000\004\032\051\001" +
    "\001\000\032\003\036\004\041\005\030\011\046\012\016" +
    "\013\013\017\047\021\040\022\042\026\033\031\023\033" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\036\004\041\005\057\011\046\012\016" +
    "\013\013\025\054\051\056\001\001\000\004\052\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\036\004" +
    "\041\005\057\011\046\012\016\013\013\025\054\051\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\071" +
    "\011\112\012\016\013\013\034\103\036\073\037\100\040" +
    "\111\042\105\043\110\053\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\071\011\112\012\016" +
    "\013\013\040\231\042\105\043\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\071\003\036\004\116\011" +
    "\112\012\016\013\013\034\115\036\073\037\100\040\111" +
    "\042\105\043\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\071\011\112" +
    "\012\016\013\013\036\120\037\100\040\111\042\105\043" +
    "\110\001\001\000\004\007\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\071\011\112\012\016\013\013\036\134\037\100\040\111" +
    "\042\105\043\110\001\001\000\004\007\133\001\001\000" +
    "\024\002\071\011\112\012\016\013\013\036\136\037\100" +
    "\040\111\042\105\043\110\001\001\000\004\007\133\001" +
    "\001\000\046\002\071\003\036\004\041\005\162\010\143" +
    "\011\145\012\016\013\013\024\152\027\160\030\155\035" +
    "\151\041\140\042\147\043\110\044\156\045\157\050\161" +
    "\001\001\000\002\001\001\000\026\002\071\011\112\012" +
    "\016\013\013\034\226\036\073\037\100\040\111\042\105" +
    "\043\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\002\071\003\036\004\041\005\162\010\143\011\145" +
    "\012\016\013\013\024\152\027\160\030\155\035\151\041" +
    "\140\042\147\043\110\044\156\045\157\050\224\001\001" +
    "\000\004\054\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\071" +
    "\003\036\004\041\005\162\010\143\011\145\012\016\013" +
    "\013\024\152\027\160\030\155\035\151\041\140\042\147" +
    "\043\110\044\156\045\157\050\200\001\001\000\026\002" +
    "\071\011\112\012\016\013\013\034\176\036\073\037\100" +
    "\040\111\042\105\043\110\001\001\000\012\006\167\011" +
    "\166\012\016\013\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\071\011\112\012\016\013\013\034\103" +
    "\036\073\037\100\040\111\042\105\043\110\053\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\071" +
    "\011\112\012\016\013\013\034\175\036\073\037\100\040" +
    "\111\042\105\043\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\071\011\112\012\016" +
    "\013\013\034\203\036\073\037\100\040\111\042\105\043" +
    "\110\001\001\000\002\001\001\000\026\002\071\011\112" +
    "\012\016\013\013\034\205\036\073\037\100\040\111\042" +
    "\105\043\110\001\001\000\002\001\001\000\004\010\207" +
    "\001\001\000\002\001\001\000\004\010\211\001\001\000" +
    "\002\001\001\000\004\054\214\001\001\000\030\002\071" +
    "\011\112\012\016\013\013\034\103\036\073\037\100\040" +
    "\111\042\105\043\110\053\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\071\011\112\012\016\013\013" +
    "\034\222\036\073\037\100\040\111\042\105\043\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\002\071\003\036\004\041\005\162\010\143\011\145\012" +
    "\016\013\013\024\152\027\160\030\155\035\151\041\140" +
    "\042\147\043\110\044\156\045\157\050\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\036\004\041\005\057" +
    "\011\046\012\016\013\013\025\054\051\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Empty


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> start_val = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // numtype ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.type, Integer.TYPE, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numtype",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // numtype ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.type, Character.TYPE, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numtype",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // numtype ::= LONG 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.type, Long.TYPE, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numtype",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // numtype ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.type, Double.TYPE, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numtype",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primtype ::= numtype 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primtype",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primtype ::= BOOL 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.type, Boolean.TYPE, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primtype",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= name 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.arbtype, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= primtype 
            {
              Node RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lit ::= LITINT 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int l = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.lit, Integer.TYPE, l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lit ::= LITCHAR 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char l = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.lit, Character.TYPE, l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lit ::= LITLONG 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		long l = (long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.lit, Long.TYPE, l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lit ::= LITDOUBLE 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double l = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.lit, Double.TYPE, l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lit ::= LITBOOL 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.lit, Boolean.TYPE, l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lit ::= NULL 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // infixop ::= PLUS 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // infixop ::= MINUS 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // infixop ::= MULT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.mult); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // infixop ::= DIV 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // infixop ::= MOD 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.mod); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // infixop ::= GT 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // infixop ::= GTE 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.gte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // infixop ::= AND 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.and); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // infixop ::= OR 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.or); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // infixop ::= EQ 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixop",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // name ::= simplename 
            {
              Node RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // name ::= qualifiedname 
            {
              Node RESULT =null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node qn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = qn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simplename ::= IDENT 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> name = new LinkedList<String>(Arrays.asList(id));
	                                               RESULT = new Node(NodeType.name, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simplename",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // qualifiedname ::= name PERIOD IDENT 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> name = (List<String>)n.getData();
                                                 name.add(id);
                                                 RESULT = n;
                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("qualifiedname",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classtype ::= name 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.classtype, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classtype",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // program ::= classdeflist 
            {
              List<Node> RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> cdl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classdef ::= classdecl classbody 
            {
              Node RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> cbds = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Node> children = cd.getChildren();
                                                 children.addAll(cbds);
                                                 RESULT = new Node(NodeType.classdef, cd.getData(), children);
                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classdecl ::= CLASS IDENT EXTENDS name 
            {
              Node RESULT =null;
		int classnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int classnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String classname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.classdecl, classname, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classbody ::= CURLYBRACEL classbodydecls CURLYBRACER 
            {
              List<Node> RESULT =null;
		int cbdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> cbds = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = cbds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbody",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classbody ::= CURLYBRACEL CURLYBRACER 
            {
              List<Node> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbody",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classbodydecls ::= classbodydecl 
            {
              List<Node> RESULT =null;
		int cbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cbd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(cbd)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodydecls",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classbodydecls ::= classbodydecls classbodydecl 
            {
              List<Node> RESULT =null;
		int cbdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> cbds = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cbd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cbds.add(cbd);
                                                 RESULT = cbds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodydecls",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classbodydecl ::= fielddef 
            {
              Node RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodydecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // classbodydecl ::= methoddef 
            {
              Node RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node md = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = md; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodydecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classbodydecl ::= constructordef 
            {
              Node RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodydecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classdeflist ::= classdef 
            {
              List<Node> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(cd)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdeflist",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classdeflist ::= classdef classdeflist 
            {
              List<Node> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> cdl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cdl.add(cd);
                                                 RESULT = cdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdeflist",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fielddef ::= type simplename SEMICOLON 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.fielddef, n, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fielddef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // localvardef ::= type simplename 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.localvardef, n, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardef",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param ::= type IDENT 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node result = new Node(NodeType.param, id, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramlist ::= param 
            {
              List<Node> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(p)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramlist ::= param paramlistcomma 
            {
              List<Node> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> pl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pl.add(0, p);
                                                 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramlistcomma ::= COMMA paramlist 
            {
              List<Node> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> pl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlistcomma",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arglist ::= expression 
            {
              List<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(new Node(NodeType.expression, e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arglist ::= arglist COMMA expression 
            {
              List<Node> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Node> al = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 al.add(0, new Node(NodeType.expression, e));
                                                 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constructordef ::= constructordecl constructorbody 
            {
              Node RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Node> children = cd.getChildren();
                                               children.add(0, cb);
                                               RESULT = new Node(NodeType.constructordef, cd.getData(), children ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructordef",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constructordecl ::= IDENT BRACKETL paramlist BRACKETR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> pl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.constructordecl, id, pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructordecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constructordecl ::= IDENT BRACKETL BRACKETR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node(NodeType.constructordecl, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructordecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constructorbody ::= CURLYBRACEL SUPER BRACKETL arglist BRACKETR SEMICOLON statementlist CURLYBRACER 
            {
              Node RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Node> al = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> sl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.constructorbody, al, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructorbody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // constructorbody ::= CURLYBRACEL SUPER BRACKETL arglist BRACKETR SEMICOLON CURLYBRACER 
            {
              Node RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Node> al = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Node(NodeType.constructorbody, al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructorbody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // constructorbody ::= CURLYBRACEL SUPER BRACKETL BRACKETR SEMICOLON statementlist CURLYBRACER 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> sl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.constructorbody, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructorbody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constructorbody ::= CURLYBRACEL SUPER BRACKETL BRACKETR SEMICOLON CURLYBRACER 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.constructorbody); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructorbody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // methoddef ::= methodheader block 
            {
              Node RESULT =null;
		int mhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mh = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 mh.getChildren().add(b);
                                               RESULT = mh; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddef",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // methodheader ::= type methoddecl 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // methodheader ::= VOID methoddecl 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // methodheader ::= MAIN 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.main); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // methoddecl ::= IDENT BRACKETL paramlist BRACKETR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // methoddecl ::= IDENT BRACKETL BRACKETR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block ::= CURLYBRACEL CURLYBRACER 
            {
              Node RESULT =null;
		 RESULT = new Node(NodeType.block); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block ::= CURLYBRACEL statementlist CURLYBRACER 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> sl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.block, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statementlist ::= statement 
            {
              List<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(Arrays.asList(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statementlist ::= statement statementlist 
            {
              List<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> sl = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(0, s);
                                               RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= SEMICOLON 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= localvardef SEMICOLON 
            {
              Node RESULT =null;
		int lvdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node lvd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lvd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= promexpression SEMICOLON 
            {
              Node RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pe = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= ifelse 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= varassignment SEMICOLON 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = va; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= RETURN expression SEMICOLON 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= block 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // varassignment ::= name ASSIGN expression 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.varassignment, n, new Node(NodeType.expression, e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varassignment",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifelse ::= IF BRACKETL expression EQ expression BRACKETR block ELSE block 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelse",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= opexpression 
            {
              Node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node o = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opexpression ::= opexpression infixop opexpression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node op = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.infixop, op, Arrays.asList(e1, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opexpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opexpression ::= castexpression 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opexpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // castexpression ::= BRACKETL expression BRACKETR opexpression 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.cast, e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // castexpression ::= BRACKETL primtype BRACKETR opexpression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.cast, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // castexpression ::= unaryexpression 
            {
              Node RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node u = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unaryexpression ::= NOT unaryexpression 
            {
              Node RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node u = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.not, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unaryexpression ::= primary 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unaryexpression ::= name 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= lit 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary ::= BRACKETL expression BRACKETR 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.paren, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary ::= fieldaccess 
            {
              Node RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fe = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fieldaccess ::= primary PERIOD IDENT 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.fieldaccess, id, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldaccess",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // promexpression ::= methodinv 
            {
              Node RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mi = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("promexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // promexpression ::= objcreat 
            {
              Node RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node oc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = oc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("promexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // methodinv ::= name methodsig 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> ms = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(NodeType.methodinv, n.getData(), ms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodinv",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // methodinv ::= primary IDENT methodsig 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Node> ms = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Node> children = Arrays.asList(new Node(NodeType.expression, p));
                                                   if(ms != null){
                                                      children.addAll(0, ms);
                                                   }
                                                   RESULT = new Node(NodeType.methodinv, id, children);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodinv",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // methodsig ::= BRACKETL arglist BRACKETR 
            {
              List<Node> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> args = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodsig",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // methodsig ::= BRACKETL BRACKETR 
            {
              List<Node> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodsig",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // objcreat ::= NEW classtype BRACKETL arglist BRACKETR 
            {
              Node RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node ct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Node> args = (List<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(NodeType.objcreat, ct, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objcreat",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // objcreat ::= NEW classtype BRACKETL BRACKETR 
            {
              Node RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node(NodeType.objcreat, ct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objcreat",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
