terminal BRACKETL, BRACKETR, CURLYBRACEL, CURLYBRACER, SEMICOLON, PERIOD, COMMA;
terminal CLASS, ELSE, EXTENDS, IF, NEW, NULL, RETURN, VOID, SUPER;
terminal ASSIGN, AND, DIV, EQ, GT, GTE, MINUS, MOD, MULT, NOT, OR, PLUS;
terminal IDENT, LITINT, LITCHAR, LITLONG, LITDOUBLE, LITBOOL;
terminal INT, CHAR, LONG, DOUBLE, BOOL;

non terminal lit, numtype, primtype, type, infixop, block, ifelse;
non terminal program;
non terminal param, paramlist, paramlistcomma;
non terminal statement, statementlist, expression, promexpression, prim;
non terminal fielddef, fieldassignment, localvardef;
non terminal name, simplename, qualifiedname;
non terminal classdef, classdecl, classbody, classbodydecls, classbodydecl, classdeflist;
non terminal constructordef, constructordecl, constructorbody;
non terminal methoddef, methoddecl, methodheader;

//Precedences
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left MOD;
precedence left GTE, GT;
precedence left AND, OR;
precedence left EQ;

start with program;

//Simple types
numtype ::= INT | CHAR | LONG | DOUBLE;
primtype ::= numtype | BOOL;
type ::= name | primtype;

//Low-level expressions
lit ::= LITINT | LITCHAR | LITLONG | LITDOUBLE | LITBOOL;
infixop ::= PLUS | MINUS | MULT | DIV | MOD
    | GT | GTE | AND | OR | EQ;

// Names
name ::= simplename | qualifiedname;
simplename ::= IDENT:id;
qualifiedname ::= name PERIOD IDENT:id;

program ::= classdeflist;

//Classes
classdef ::=  classdecl classbody;
classdecl ::= CLASS IDENT:classname EXTENDS name;
classbody ::= CURLYBRACEL classbodydecls CURLYBRACER
    | CURLYBRACEL CURLYBRACER;
classbodydecls ::= classbodydecl
    | classbodydecls classbodydecl;
classbodydecl ::= fielddef
    | methoddef
    | constructordef;

classdeflist ::= classdef
    | classdef:cd classdeflist:cdl
    ;

//Fields
fielddef ::= type simplename SEMICOLON;
localvardef ::= type simplename;

// Constructor
constructordef ::= constructordecl constructorbody;
constructordecl ::= IDENT:id BRACKETL paramlist BRACKETR
    | IDENT:id BRACKETL BRACKETR;
constructorbody ::= CURLYBRACEL SUPER BRACKETL paramlist BRACKETR SEMICOLON CURLYBRACER
    | CURLYBRACEL SUPER BRACKETL BRACKETR SEMICOLON CURLYBRACER;

// Method
methoddef ::= methodheader block;
methodheader ::= type:type methoddecl
    | VOID methoddecl;
methoddecl ::= IDENT:id BRACKETL paramlist BRACKETR
    | IDENT:id BRACKETL BRACKETR;

block ::= CURLYBRACEL CURLYBRACER
    | CURLYBRACEL statementlist CURLYBRACER;

// parameters
param ::= type:type IDENT:id;
paramlist ::= param
    | param:param paramlistcomma;
paramlistcomma ::= COMMA paramlist;

// Statements
statementlist ::= statement
    | statement statementlist;
statement ::= SEMICOLON
    | localvardef SEMICOLON
    | promexpression SEMICOLON
    | ifelse
    | fieldassignment SEMICOLON
    | RETURN expression SEMICOLON
    | block;

fieldassignment ::= name ASSIGN expression;

ifelse ::= IF BRACKETL expression EQ expression BRACKETR block ELSE block;

expression ::= name
    | NULL
    | promexpression
    | BRACKETL name BRACKETR expression
    | prim;

prim ::= lit
    | name
    | prim infixop prim
    | BRACKETL prim BRACKETR
    | NOT prim;
