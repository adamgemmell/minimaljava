import com.ajsg2.minimaljava.common.ast.*;
import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.Collections;

parser code {:
    // Empty
:};

terminal BRACKETL, BRACKETR, CURLYBRACEL, CURLYBRACER, SEMICOLON, PERIOD, COMMA;
terminal CLASS, ELSE, EXTENDS, IF, NEW, NULL, RETURN, VOID, SUPER;
terminal ASSIGN, AND, DIV, EQ, GT, GTE, MINUS, MOD, MULT, NOT, OR, PLUS;
terminal INT, CHAR, LONG, DOUBLE, BOOL;
terminal MAIN;
terminal String IDENT;
terminal int LITINT;
terminal char LITCHAR;
terminal long LITLONG;
terminal double LITDOUBLE;
terminal boolean LITBOOL;

non terminal Node lit, numtype, primtype, type, classtype, infixop, block;
non terminal Node name, simplename, qualifiedname;

non terminal List<Node> program;
non terminal Node       classdef, classdecl, classbodydecl;
non terminal List<Node> classbody;
non terminal Node       constructordef, constructordecl, constructorbody;
non terminal Node       statement;
non terminal Node       param;
non terminal Node       fielddef, localvardef, ifelse;
non terminal Node       methoddef, methoddecl, methodheader;
non terminal Node       expression, promexpression, opexpression, castexpression, unaryexpression;
non terminal Node       varassignment, primary, fieldaccess;
non terminal Node       methodinv;
non terminal Node       objcreat;

// Lists
non terminal List<Node> classdeflist, classbodydecls, statementlist, paramlist, paramlistcomma, arglist, methodsig;

// Precedences
precedence left OR, AND;
precedence left EQ;
precedence left GTE, GT;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left NOT;

start with program;

// Simple types
numtype ::= INT                               {: RESULT = new Node(NodeType.type, Integer.TYPE, null, null); :}
    | CHAR                                    {: RESULT = new Node(NodeType.type, Character.TYPE, null, null); :}
    | LONG                                    {: RESULT = new Node(NodeType.type, Long.TYPE, null, null); :}
    | DOUBLE                                  {: RESULT = new Node(NodeType.type, Double.TYPE, null, null); :};
primtype ::= numtype:n                        {: RESULT = n; :}
    | BOOL                                    {: RESULT = new Node(NodeType.type, Boolean.TYPE, null, null); :};
type ::= name:n                               {: RESULT = new Node(NodeType.arbtype, n); :}
    | primtype:pt                             {: RESULT = pt; :};

// Low-level expressions
lit ::= LITINT:l                              {: RESULT = new Node(NodeType.lit, Integer.TYPE, l, null); :}
    | LITCHAR:l                               {: RESULT = new Node(NodeType.lit, Character.TYPE, l, null); :}
    | LITLONG:l                               {: RESULT = new Node(NodeType.lit, Long.TYPE, l, null); :}
    | LITDOUBLE:l                             {: RESULT = new Node(NodeType.lit, Double.TYPE, l, null); :}
    | LITBOOL:l                               {: RESULT = new Node(NodeType.lit, Boolean.TYPE, l, null); :}
    | NULL                                    {: RESULT = new Node(NodeType.lit); :};
infixop ::= PLUS                              {: RESULT = new Node(NodeType.plus); :}
    | MINUS                                   {: RESULT = new Node(NodeType.minus); :}
    | MULT                                    {: RESULT = new Node(NodeType.mult); :}
    | DIV                                     {: RESULT = new Node(NodeType.div); :}
    | MOD                                     {: RESULT = new Node(NodeType.mod); :}
    | GT                                      {: RESULT = new Node(NodeType.gt); :}
    | GTE                                     {: RESULT = new Node(NodeType.gte); :}
    | AND                                     {: RESULT = new Node(NodeType.and); :}
    | OR                                      {: RESULT = new Node(NodeType.or); :}
    | EQ                                      {: RESULT = new Node(NodeType.eq); :};

// Names
name ::= simplename:sn                        {: RESULT = sn; :}
    | qualifiedname:qn                        {: RESULT = qn; :};
simplename ::= IDENT:id                       {: List<String> name = new LinkedList<String>(Arrays.asList(id));
	                                               RESULT = new Node(NodeType.name, name); :};
qualifiedname ::= name:n PERIOD IDENT:id      {: List<String> name = (List<String>)n.getData();
                                                 name.add(id);
                                                 RESULT = n;
                                              :};

classtype ::= name:n                          {: RESULT = new Node(NodeType.classtype, n); :};

program ::= classdeflist:cdl                  {: RESULT = cdl; :};

// Classes
classdef ::=  classdecl:cd classbody:cbds     {: List<Node> children = cd.getChildren();
                                                 children.addAll(cbds);
                                                 RESULT = new Node(NodeType.classdef, cd.getData(), children);
                                              :};
classdecl ::= CLASS IDENT:classname EXTENDS name:n
                                              {: RESULT = new Node(NodeType.classdecl, classname, n); :};
classbody ::= CURLYBRACEL classbodydecls:cbds CURLYBRACER
                                              {: RESULT = cbds; :}
    | CURLYBRACEL CURLYBRACER                 {: RESULT = new LinkedList<>(); :};

classbodydecls ::= classbodydecl:cbd          {: RESULT = new LinkedList<>(Arrays.asList(cbd)); :}
    | classbodydecls:cbds classbodydecl:cbd   {: cbds.add(cbd);
                                                 RESULT = cbds; :};

classbodydecl ::= fielddef:fd                 {: RESULT = fd; :}
    | methoddef:md                            {: RESULT = md; :}
    | constructordef:cd                       {: RESULT = cd; :};

classdeflist ::= classdef:cd                  {: RESULT = new LinkedList<>(Arrays.asList(cd)); :}
    | classdef:cd classdeflist:cdl            {: cdl.add(cd);
                                                 RESULT = cdl; :};

// Fields
fielddef ::= type:t simplename:n SEMICOLON      {: RESULT = new Node(NodeType.fielddef, n, t); :};
localvardef ::= type:t simplename:n             {: RESULT = new Node(NodeType.localvardef, n, t); :};

// Parameters
param ::= type:type IDENT:id                  {: Node result = new Node(NodeType.param, id, type); :};
paramlist ::= param:p                         {: RESULT = new LinkedList<>(Arrays.asList(p)); :}
    | param:p paramlistcomma:pl               {: pl.add(0, p);
                                                 RESULT = pl; :};
paramlistcomma ::= COMMA paramlist:pl         {: RESULT = pl; :};

// Args
arglist ::= expression:e                      {: RESULT = new LinkedList<>(Arrays.asList(e)); :}
    | arglist:al COMMA expression:e           {: al.add(0, e);
                                                 RESULT = al; :};

// Constructor
constructordef ::= constructordecl:cd constructorbody:cb
                                            {: List<Node> children = cd.getChildren();
                                               children.add(0, cb);
                                               RESULT = new Node(NodeType.constructordef, cd.getData(), children ); :};
constructordecl ::= IDENT:id BRACKETL paramlist:pl BRACKETR
                                            {: RESULT = new Node(NodeType.constructordecl, id, pl); :}
    | IDENT:id BRACKETL BRACKETR            {: RESULT = new Node(NodeType.constructordecl, id); :};
constructorbody ::= CURLYBRACEL SUPER BRACKETL arglist:al BRACKETR SEMICOLON statementlist: sl CURLYBRACER
                                            {: RESULT = new Node(NodeType.constructorbody, al, sl); :}
    | CURLYBRACEL SUPER BRACKETL arglist:al BRACKETR SEMICOLON CURLYBRACER
                                            {: RESULT = new Node(NodeType.constructorbody, al); :}
    | CURLYBRACEL SUPER BRACKETL BRACKETR SEMICOLON statementlist: sl CURLYBRACER
                                            {: RESULT = new Node(NodeType.constructorbody, sl); :}
    | CURLYBRACEL SUPER BRACKETL BRACKETR SEMICOLON CURLYBRACER
                                            {: RESULT = new Node(NodeType.constructorbody); :};

// Method
methoddef ::= methodheader:mh block:b       {: mh.getChildren().add(b);
                                               RESULT = mh; :};
methodheader ::= type:type methoddecl
    | VOID methoddecl
    | MAIN                                  {: RESULT = new Node(NodeType.main); :};
methoddecl ::= IDENT:id BRACKETL paramlist BRACKETR
    | IDENT:id BRACKETL BRACKETR;

block ::= CURLYBRACEL CURLYBRACER               {: RESULT = new Node(NodeType.block); :}
    | CURLYBRACEL statementlist:sl CURLYBRACER  {: RESULT = new Node(NodeType.block, sl); :};

// Statements
statementlist ::= statement:s               {: RESULT = new LinkedList<>(Arrays.asList(s)); :}
    | statement:s statementlist:sl          {: sl.add(0, s);
                                               RESULT = sl; :};
statement ::= SEMICOLON
    | localvardef:lvd SEMICOLON             {: RESULT = lvd; :}
    | promexpression:pe SEMICOLON           {: RESULT = pe; :}
    | ifelse
    | varassignment:va SEMICOLON            {: RESULT = va; :}
    | RETURN expression SEMICOLON
    | block;

varassignment ::= name:n ASSIGN expression:e  {: RESULT = new Node(NodeType.varassignment, n, e); :};

ifelse ::= IF BRACKETL expression EQ expression BRACKETR block ELSE block;

// Simplified version from https://www.cs.cornell.edu/andru/javaspec/19.doc.html
expression ::= opexpression:o                   {: RESULT = o; :};

opexpression ::= opexpression infixop opexpression
    | castexpression:c                          {: RESULT = c; :};

// Whether or not this is a valid cast must be decided later
// due to LALR(1) limitations
castexpression ::= BRACKETL expression BRACKETR opexpression
    | BRACKETL primtype BRACKETR opexpression
    | unaryexpression:u                         {: RESULT = u; :};

unaryexpression ::= NOT unaryexpression:u       {: RESULT = new Node(NodeType.not, u); :}
    | primary:p                                 {: RESULT = p; :}
    | name:n                                    {: RESULT = n; :};

primary ::= lit:l                               {: RESULT = l; :}
    | BRACKETL expression:e BRACKETR            {: RESULT = new Node(NodeType.paren, e); :}
    | fieldaccess:fe                            {: RESULT = fe; :};

fieldaccess ::= primary:p PERIOD IDENT:id       {: RESULT = new Node(NodeType.fieldaccess, id, p); :};

promexpression ::= methodinv:mi                 {: RESULT = mi; :}
    | objcreat:oc                               {: RESULT = oc; :};

methodinv ::= name:n methodsig:ms               {: RESULT = new Node(NodeType.methodinv, n.getData(), ms); :}
    | primary:p IDENT:id methodsig:ms           {: List<Node> children = Arrays.asList(new Node(NodeType.expression, p));
                                                   if(ms != null){
                                                      children.addAll(0, ms);
                                                   }
                                                   RESULT = new Node(NodeType.methodinv, id, children);
                                                :};
methodsig ::= BRACKETL arglist:args BRACKETR    {: RESULT = args; :}
    | BRACKETL BRACKETR                {: RESULT = null; :};

objcreat ::= NEW classtype:ct BRACKETL arglist:args BRACKETR  {: RESULT = new Node(NodeType.objcreat, ct, args); :}
    | NEW classtype:ct BRACKETL BRACKETR                      {: RESULT = new Node(NodeType.objcreat, ct); :};